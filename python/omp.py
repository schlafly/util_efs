# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_omp', [dirname(__file__)])
        except ImportError:
            import _omp
            return _omp
        if fp is not None:
            try:
                _mod = imp.load_module('_omp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _omp = swig_import_helper()
    del swig_import_helper
else:
    import _omp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def omp_set_num_threads(*args):
  return _omp.omp_set_num_threads(*args)
omp_set_num_threads = _omp.omp_set_num_threads

def omp_set_dynamic(*args):
  return _omp.omp_set_dynamic(*args)
omp_set_dynamic = _omp.omp_set_dynamic

def omp_set_nested(*args):
  return _omp.omp_set_nested(*args)
omp_set_nested = _omp.omp_set_nested

def omp_set_max_active_levels(*args):
  return _omp.omp_set_max_active_levels(*args)
omp_set_max_active_levels = _omp.omp_set_max_active_levels

def omp_get_num_threads():
  return _omp.omp_get_num_threads()
omp_get_num_threads = _omp.omp_get_num_threads

def omp_get_dynamic():
  return _omp.omp_get_dynamic()
omp_get_dynamic = _omp.omp_get_dynamic

def omp_get_nested():
  return _omp.omp_get_nested()
omp_get_nested = _omp.omp_get_nested

def omp_get_max_threads():
  return _omp.omp_get_max_threads()
omp_get_max_threads = _omp.omp_get_max_threads

def omp_get_thread_num():
  return _omp.omp_get_thread_num()
omp_get_thread_num = _omp.omp_get_thread_num

def omp_get_num_procs():
  return _omp.omp_get_num_procs()
omp_get_num_procs = _omp.omp_get_num_procs

def omp_in_parallel():
  return _omp.omp_in_parallel()
omp_in_parallel = _omp.omp_in_parallel

def omp_get_active_level():
  return _omp.omp_get_active_level()
omp_get_active_level = _omp.omp_get_active_level

def omp_get_level():
  return _omp.omp_get_level()
omp_get_level = _omp.omp_get_level

def omp_get_ancestor_thread_num(*args):
  return _omp.omp_get_ancestor_thread_num(*args)
omp_get_ancestor_thread_num = _omp.omp_get_ancestor_thread_num

def omp_get_team_size(*args):
  return _omp.omp_get_team_size(*args)
omp_get_team_size = _omp.omp_get_team_size

def omp_get_thread_limit():
  return _omp.omp_get_thread_limit()
omp_get_thread_limit = _omp.omp_get_thread_limit

def omp_get_max_active_levels():
  return _omp.omp_get_max_active_levels()
omp_get_max_active_levels = _omp.omp_get_max_active_levels


